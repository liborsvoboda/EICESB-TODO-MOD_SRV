using System;
using System.Linq.Expressions;

public static class Program {
    public static void Main() {
        Inspect.MemoryGraph(new[] { 1, 2, 3 });
        Inspect.MemoryGraph(new[] { "a", "b", "c" });
    }
}

#=>

{
  "type": "inspection:memory-graph",
  "stack": [
    {
      "id": 1,
      "offset": 0,
      "size": 8,
      "title": null,
      "value": "Int32[] ref"
    }
  ],
  "heap": [
    {
      "id": 2,
      "title": "Int32[]",
      "value": "{ 1, 2, 3 }",
      "nestedNodes": [
        {
          "id": 3,
          "title": "0",
          "value": "1"
        },
        {
          "id": 4,
          "title": "1",
          "value": "2"
        },
        {
          "id": 5,
          "title": "2",
          "value": "3"
        }
      ]
    }
  ],
  "references": [
    {
      "from": 1,
      "to": 2
    }
  ]
}
{
  "type": "inspection:memory-graph",
  "stack": [
    {
      "id": 6,
      "offset": 0,
      "size": 8,
      "title": null,
      "value": "String[] ref"
    }
  ],
  "heap": [
    {
      "id": 7,
      "title": "String[]",
      "value": "{ a, b, c }",
      "nestedNodes": [
        {
          "id": 8,
          "title": "0",
          "value": "String ref"
        },
        {
          "id": 10,
          "title": "1",
          "value": "String ref"
        },
        {
          "id": 12,
          "title": "2",
          "value": "String ref"
        }
      ]
    },
    {
      "id": 9,
      "title": "String",
      "value": "a"
    },
    {
      "id": 11,
      "title": "String",
      "value": "b"
    },
    {
      "id": 13,
      "title": "String",
      "value": "c"
    }
  ],
  "references": [
    {
      "from": 8,
      "to": 9
    },
    {
      "from": 10,
      "to": 11
    },
    {
      "from": 12,
      "to": 13
    },
    {
      "from": 6,
      "to": 7
    }
  ]
}